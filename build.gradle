buildscript {
    ext.kotlin_version = '1.2.41'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'edu.sc.seis.gradle:launch4j:2.4.2'
        classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'
    }
}

plugins {
    id 'java'
}

group 'app.vertretungsplan'
version '0.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'javafx-gradle-plugin'
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
mainClassName = 'app.vertretungsplan.uploader.VertretungsplanUploaderMain'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'no.tornado:tornadofx:1.7.16'
    compile 'com.jfoenix:jfoenix:8.0.4'
    compile 'de.codecentric.centerdevice:javafxsvg:1.3.0'
    compile 'net.harawata:appdirs:1.0.0'
    compile 'net.java.dev.jna:platform:3.5.2'
    compile 'org.apache.commons:commons-vfs2:2.2'
    compile 'commons-httpclient:commons-httpclient:3.1'
    compile 'commons-net:commons-net:3.6'
    compile 'com.jcraft:jsch:0.1.54'
    compile "de.huxhorn.lilith:de.huxhorn.lilith.3rdparty.junique:1.0.4"
    compile 'org.json:json:20180130'
    compile 'com.github.kittinunf.fuel:fuel:1.12.0'
    compile 'io.sentry:sentry:1.7.5'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockftpserver:MockFtpServer:2.7.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jfx {
    mainClass = mainClassName
    vendor = 'vertretungsplan.app'
    jfxMainAppJarName = "vertretungsplan-uploader-${version}.jar"

    // gradle jfxNative
    identifier = null
    nativeReleaseVersion = version
    needShortcut = false
    needMenu = false
    appName = "Vertretungsplan Uploader"
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    archiveName = project.name + '.jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task generateBuildInfo(type: WriteProperties) {
    def propertyFile = file "src/main/resources/buildInfo.properties"
    property('version', project.version)
    property('release', !project.version.endsWith('SNAPSHOT'))
    setOutputFile(propertyFile)
    writeProperties()
}
build.dependsOn(tasks.generateBuildInfo)

launch4j {
    mainClassName = mainClassName
    jar = "lib/${project.tasks.fatJar.archiveName}"
    copyConfigurable = project.tasks.fatJar.outputs.files
    bundledJrePath = "jre"
    bundledJre64Bit = true
    version = version
    fileDescription = "Programm zum Hochladen von Vertretungspl√§nen"
    copyright = "vertretungsplan.app"
    companyName = "vertretungsplan.app"
    productName = "Vertretungsplan Uploader"
    //splashFileName = "../../../img/splash.bmp"
    //icon = "../../../img/icon_on_shape.ico"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport